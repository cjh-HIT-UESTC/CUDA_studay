#include<stdio.h>
#include<stdlib.h>
#include<iostream>

//cuda的一些头文件
#include <cuda.h>
#include <curand_kernel.h>
#include<cuda_runtime_api.h>
#include "device_launch_parameters.h"

__global__ void add(int* a, int* b, int* c, int num)
{
	//因为是一个线程只做一个加法 所以就把这个线程该做的数据拿出来 拿出来就可以使用 threadid.x
	int i = threadIdx.x;

	if (i < num)	//保险起见的看是否会溢出
	{
		c[i] = a[i] + b[i];
	}
	
}

int main(void)
{
	int num = 10;   //因为num是变量 所以不能赋值给数组  这里要使用动态数组的方式 也就是使用new
		//注意下面的写法
	int* a = new int[num];
	int* b = new int[num];
	int* c = new int[num];

	//定义设备上的参数
	int* a_gpu, * b_gpu, * c_gpu;

	//给它们分配空间		一定要先分配空间！！
	cudaMalloc((void**)&a_gpu, num * sizeof(int));	//注意：在这里分配空间 必须把参数强制转换成 void** 类型 并给它的地址 & 
	cudaMalloc((void**)&b_gpu, num * sizeof(int));
	cudaMalloc((void**)&c_gpu, num * sizeof(int));

	//在主机上的数据要有初始值 所以先初始化
	for (int i = 0; i < num; ++i)	
	{
		a[i] = i;
		b[i] = i * i;
	}

	//cudaSetDevice(0);

	//拷贝参数
	cudaMemcpy(a_gpu, a, num * sizeof(int), cudaMemcpyHostToDevice);	//注意cudaMemcpy的操作：是把第二个参数传给第一个参数，第三个参数是要传的大小，第4个参数是传说方向
	cudaMemcpy(b_gpu, b, num * sizeof(int), cudaMemcpyHostToDevice);

	//do   调用设备的函数      在这里注意 因为 我们开的是1个块 10个线程 所以每个线程做的事是相同的 ：意思就是一个线程其实只是一次加法运算而已（两个数相加）
	add<<<1,num>>>(a_gpu, b_gpu, c_gpu, num);  //开线程，这样写表示，开 1块 10个线程

	//get data
	cudaMemcpy(c, c_gpu, num * sizeof(int), cudaMemcpyDeviceToHost);		//把显存上的数据拷贝回内存

	//打印结果
	for (int i = 0; i < num; ++i)
	{
		printf("%d + %d = %d\n", a[i], b[i], c[i]);
	}

	return 0;
}
